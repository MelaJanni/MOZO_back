# .github/workflows/deploy.yml
name: Deploy-Laravel-with-WebSockets

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1) GitHub recomienda hacer checkout aunque no uses el repo local
    - name: Checkout
      uses: actions/checkout@v4

    # 2) Despliegue vía SSH
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1
      with:
        host:      ${{ secrets.SERVER_HOST }}
        username:  ${{ secrets.SERVER_USER }}
        key:       ${{ secrets.SSH_KEY }}
        port:      22
        script: |
          set -e
          PROJECT_DIR="/var/www/vhosts/mozoqr.com/httpdocs"
          REPO_URL="${{ secrets.REPO_URL }}"

          echo "🚀  Deploy iniciado"
          echo "🔎  PROJECT_DIR  → $PROJECT_DIR"
          echo "🔎  REPO_URL     → $REPO_URL"

          # ------------------------------------------------------------------
          # 0) limpiar clon huérfano de /var/www/mozo si quedara alguno
          # ------------------------------------------------------------------
          if [ -d /var/www/mozo ]; then
            echo "🧹  Eliminando /var/www/mozo (clon antiguo)…"
            sudo rm -rf /var/www/mozo
          fi

          # ------------------------------------------------------------------
          # 1) asegurar carpeta destino
          # ------------------------------------------------------------------
          sudo mkdir -p "$PROJECT_DIR"
          sudo chown -R "$USER":"$USER" "$PROJECT_DIR"

          git config --global --add safe.directory "$PROJECT_DIR"
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

          cd "$PROJECT_DIR"

          # ------------------------------------------------------------------
          # 2) clonar / actualizar código
          # ------------------------------------------------------------------
          if [ ! -d .git ]; then
            echo "📥  Clonando repo…"
            git clone --depth=1 "$REPO_URL" .
          else
            echo "🔄  Haciendo pull…"
            git fetch origin main
            git reset --hard origin/main
          fi

          # ------------------------------------------------------------------
          # 3) instalar dependencias
          # ------------------------------------------------------------------
          composer install --no-dev --prefer-dist --optimize-autoloader

          # ------------------------------------------------------------------
          # 4) preparar servicio laravel-websockets
          # ------------------------------------------------------------------
          SERVICE=/etc/systemd/system/laravel-websockets.service
          if [ ! -f "$SERVICE" ]; then
            echo "🛠️  Creando unit file laravel-websockets.service"
            sudo bash -c "cat > $SERVICE" <<'EOF'
          [Unit]
          Description=Laravel WebSockets (Pusher compatible)
          After=network.target

          [Service]
          Type=simple
          User=${USER}
          WorkingDirectory=/var/www/vhosts/mozoqr.com/httpdocs
          ExecStart=/usr/bin/php artisan websockets:serve
          Restart=always
          RestartSec=5
          StandardOutput=syslog
          StandardError=syslog
          SyslogIdentifier=laravel-websockets

          [Install]
          WantedBy=multi-user.target
          EOF
            sudo systemctl daemon-reload
            sudo systemctl enable laravel-websockets.service
          fi

          echo "🚦  Arrancando (o reiniciando) laravel-websockets…"
          sudo systemctl restart laravel-websockets.service

          # esperar a que realmente escuche en 6001
          for i in {1..15}; do
            ss -lnt | grep -q ':6001' && break
            echo "⌛  Esperando websocket (intento $i)…"
            sleep 1
          done
          ss -lnt | grep -q ':6001' || { echo "❌  El puerto 6001 no abrió"; exit 1; }
          echo "✅  WebSockets activo en 6001"

          # ------------------------------------------------------------------
          # 5) limpiar & cachear configuración
          # ------------------------------------------------------------------
          php artisan config:clear
          php artisan config:cache

          # ------------------------------------------------------------------
          # 6) migraciones + seed (solo en 1er deploy)
          # ------------------------------------------------------------------
          if [ ! -f storage/app/first_deploy_done ]; then
            php artisan migrate:fresh --seed --force
            touch storage/app/first_deploy_done
          else
            php artisan migrate --force
          fi

          # ------------------------------------------------------------------
          # 7) reiniciar php artisan serve (muy básico, solo para demo)
          # ------------------------------------------------------------------
          pkill -f "artisan serve" || true
          nohup php artisan serve --host=0.0.0.0 --port=8000 \
               > storage/logs/serve.log 2>&1 &

          echo "🎉  Deploy completado correctamente"

