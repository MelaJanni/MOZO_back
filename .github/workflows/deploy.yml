# ------------------------------------------------------------
#  Deploy Laravel a tu VPS con un workflow ultraligero
# ------------------------------------------------------------
# 1. Se dispara cada push a main.
# 2. Conecta vía SSH (clave privada en el secret SSH_KEY).
# 3. Si el repo ya existe → git fetch / reset.
#    Si NO existe → elimina todo y clona desde cero.
# 4. Instala dependencias (composer install).
# 5. Solo en el PRIMER deploy corre migraciones + seed.
# 6. Reinicia un servidor php artisan serve (opcional).
# ------------------------------------------------------------

name: Deploy-Laravel-Simple

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso vacío solo para mostrar el inicio en los logs
      - name: 🚀  Iniciando deploy
        run: echo "Arrancando pipeline…"

      - name: 📦  Ejecutar script en el VPS
        uses: appleboy/ssh-action@v1
        with:
          host:      ${{ secrets.SERVER_HOST }}
          username:  ${{ secrets.SERVER_USER }}
          key:       ${{ secrets.SSH_KEY }}
          port:      22
          debug:     true

          script: |
            echo "🚀  Deploy iniciado"
            set -e
          
            # --- 0) Variables de ruta ---
            PROJECT_DIR="${{ secrets.SERVER_PATH }}"
          
            # --- 1) Asegurar que la ruta existe ---
            if [ ! -d "$PROJECT_DIR" ]; then
                echo "⚠️  La ruta $PROJECT_DIR no existe; creando..."
                mkdir -p "$PROJECT_DIR"
            fi
          
            # --- 2) Git config seguro y known_hosts ---
            git config --global --add safe.directory "$PROJECT_DIR"
            ssh-keyscan github.com >> ~/.ssh/known_hosts
          
            cd "$PROJECT_DIR"
          
            # --- 3) Clonar o actualizar ---
            if [ ! -d .git ]; then
                echo "📂  NO hay repo, clonando desde cero"
                git clone --depth=1 ${{ secrets.REPO_URL }} .
            else
                echo "📂  Repo existente, actualizando"
                git fetch origin main
                git reset --hard origin/main
            fi
          
            # --- 4) Dependencias PHP ---
            composer install --no-dev --prefer-dist --optimize-autoloader
          
            # --- 5) Migraciones sólo la primera vez ---
            if [ ! -f storage/app/first_deploy_done ]; then
                php artisan migrate:fresh --seed --force
                touch storage/app/first_deploy_done
            fi
          
            # --- 6) Limpiar y cachear config .env ---
            php artisan config:clear
            php artisan config:cache
          
            # --- 7) Reiniciar (ejemplo simple) ---
            pkill -f "artisan serve" || true
            nohup php artisan serve --host=0.0.0.0 --port=8000 \
                  > storage/logs/serve.log 2>&1 &
          
            echo "✅  Deploy completo"
