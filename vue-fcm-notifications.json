{
  "project_structure": {
    "description": "Estructura de archivos para Vue 3 + FCM + Pinia",
    "files": [
      "src/firebase/config.js",
      "src/services/notificationService.js", 
      "src/stores/notificationStore.js",
      "src/components/NotificationBell.vue",
      "src/components/NotificationItem.vue",
      "src/composables/useNotifications.js",
      "public/firebase-messaging-sw.js",
      "src/styles/notifications.css"
    ]
  },
  
  "step_1_firebase_config": {
    "file": "src/firebase/config.js",
    "code": "import { initializeApp } from 'firebase/app'\nimport { getMessaging } from 'firebase/messaging'\n\nconst firebaseConfig = {\n  apiKey: \"tu-api-key\",\n  authDomain: \"mozoqr-7d32c.firebaseapp.com\",\n  projectId: \"mozoqr-7d32c\",\n  storageBucket: \"mozoqr-7d32c.appspot.com\",\n  messagingSenderId: \"123456789\",\n  appId: \"tu-app-id\"\n}\n\nconst app = initializeApp(firebaseConfig)\nexport const messaging = getMessaging(app)\nexport default app"
  },

  "step_2_service_worker": {
    "file": "public/firebase-messaging-sw.js",
    "code": "importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js')\nimportScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js')\n\nfirebase.initializeApp({\n  apiKey: \"tu-api-key\",\n  authDomain: \"mozoqr-7d32c.firebaseapp.com\",\n  projectId: \"mozoqr-7d32c\",\n  storageBucket: \"mozoqr-7d32c.appspot.com\",\n  messagingSenderId: \"123456789\",\n  appId: \"tu-app-id\"\n})\n\nconst messaging = firebase.messaging()\n\n// Notificaciones en background (app cerrada/minimizada)\nmessaging.onBackgroundMessage((payload) => {\n  console.log('🔔 Background notification:', payload)\n\n  const notificationTitle = payload.notification.title\n  const notificationOptions = {\n    body: payload.notification.body,\n    icon: '/logo192.png',\n    badge: '/badge-72x72.png',\n    tag: 'mozo-notification',\n    data: payload.data,\n    actions: [\n      { action: 'open', title: '👀 Ver' },\n      { action: 'dismiss', title: '❌ Cerrar' }\n    ]\n  }\n\n  return self.registration.showNotification(notificationTitle, notificationOptions)\n})\n\n// Manejar clics en notificaciones\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close()\n  if (event.action === 'open') {\n    clients.openWindow('/')\n  }\n})"
  },

  "step_3_notification_service": {
    "file": "src/services/notificationService.js",
    "code": "import { onMessage, getToken } from 'firebase/messaging'\nimport { messaging } from '@/firebase/config.js'\nimport { useAuthStore } from '@/stores/authStore.js' // Asume que tienes un store de autenticación\n\nclass NotificationService {\n  constructor() {\n    this.isInitialized = false\n    this.vapidKey = 'tu-vapid-key' // Obtener de Firebase Console\n  }\n\n  async initialize() {\n    if (this.isInitialized) return\n\n    try {\n      // 1. Registrar service worker\n      if ('serviceWorker' in navigator) {\n        await navigator.serviceWorker.register('/firebase-messaging-sw.js')\n        console.log('✅ Service Worker registered')\n      }\n\n      // 2. Pedir permisos\n      const permission = await Notification.requestPermission()\n      if (permission !== 'granted') {\n        console.warn('❌ Notification permission denied')\n        return false\n      }\n\n      // 3. Obtener token FCM\n      const token = await getToken(messaging, {\n        vapidKey: this.vapidKey\n      })\n\n      if (token) {\n        console.log('📱 FCM Token:', token)\n        await this.sendTokenToServer(token)\n      } else {\n        console.warn('❌ No FCM token received')\n        return false\n      }\n\n      this.isInitialized = true\n      console.log('✅ NotificationService initialized')\n      return true\n\n    } catch (error) {\n      console.error('❌ Error initializing notifications:', error)\n      return false\n    }\n  }\n\n  async sendTokenToServer(token) {\n    try {\n      const authStore = useAuthStore()\n      const authToken = authStore.token\n\n      if (!authToken) {\n        console.warn('❌ No auth token available')\n        return\n      }\n\n      const response = await fetch('https://mozoqr.com/api/device-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`,\n        },\n        body: JSON.stringify({\n          token: token,\n          platform: 'web'\n        })\n      })\n\n      if (response.ok) {\n        console.log('✅ Token sent to server successfully')\n      } else {\n        console.error('❌ Failed to send token to server:', response.status)\n      }\n    } catch (error) {\n      console.error('❌ Error sending token to server:', error)\n    }\n  }\n\n  setupForegroundListener(onNotificationReceived) {\n    // 🔥 CANAL ABIERTO - se ejecuta automáticamente cuando llega notificación\n    onMessage(messaging, (payload) => {\n      console.log('🔔 Foreground notification received:', payload)\n\n      const notification = {\n        id: `fcm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        title: payload.notification?.title || 'Notificación',\n        body: payload.notification?.body || '',\n        data: payload.data || {},\n        timestamp: new Date().toISOString(),\n        read: false,\n        type: 'fcm'\n      }\n\n      // Callback para actualizar el store\n      if (onNotificationReceived) {\n        onNotificationReceived(notification)\n      }\n\n      // Mostrar toast en la app\n      this.showInAppToast(notification)\n    })\n  }\n\n  showInAppToast(notification) {\n    // Crear toast notification\n    const toast = document.createElement('div')\n    toast.className = 'fcm-toast'\n    toast.innerHTML = `\n      <div class=\"fcm-toast-content\">\n        <div class=\"fcm-toast-icon\">🔔</div>\n        <div class=\"fcm-toast-text\">\n          <div class=\"fcm-toast-title\">${notification.title}</div>\n          <div class=\"fcm-toast-body\">${notification.body}</div>\n        </div>\n        <button class=\"fcm-toast-close\" onclick=\"this.parentElement.remove()\">×</button>\n      </div>\n    `\n\n    // Estilos CSS inline\n    toast.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      z-index: 10000;\n      max-width: 320px;\n      animation: slideInRight 0.3s ease-out;\n    `\n\n    // Agregar animación CSS si no existe\n    if (!document.querySelector('#fcm-toast-styles')) {\n      const style = document.createElement('style')\n      style.id = 'fcm-toast-styles'\n      style.textContent = `\n        @keyframes slideInRight {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n        .fcm-toast-content {\n          display: flex;\n          align-items: flex-start;\n          gap: 12px;\n        }\n        .fcm-toast-icon {\n          font-size: 20px;\n          flex-shrink: 0;\n        }\n        .fcm-toast-title {\n          font-weight: 600;\n          margin-bottom: 4px;\n          font-size: 14px;\n        }\n        .fcm-toast-body {\n          color: #666;\n          font-size: 13px;\n        }\n        .fcm-toast-close {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #999;\n          flex-shrink: 0;\n        }\n      `\n      document.head.appendChild(style)\n    }\n\n    document.body.appendChild(toast)\n\n    // Auto-remove después de 5 segundos\n    setTimeout(() => {\n      if (toast.parentNode) {\n        toast.remove()\n      }\n    }, 5000)\n  }\n}\n\n// Instancia singleton\nexport const notificationService = new NotificationService()"
  },

  "step_4_pinia_store": {
    "file": "src/stores/notificationStore.js",
    "code": "import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { notificationService } from '@/services/notificationService.js'\n\nexport const useNotificationStore = defineStore('notifications', () => {\n  // State\n  const notifications = ref([])\n  const isInitialized = ref(false)\n  const isLoading = ref(false)\n\n  // Getters\n  const unreadCount = computed(() => {\n    return notifications.value.filter(n => !n.read).length\n  })\n\n  const unreadNotifications = computed(() => {\n    return notifications.value.filter(n => !n.read)\n  })\n\n  const readNotifications = computed(() => {\n    return notifications.value.filter(n => n.read)\n  })\n\n  // Actions\n  async function initialize() {\n    if (isInitialized.value) return\n\n    isLoading.value = true\n    \n    try {\n      // Cargar notificaciones guardadas\n      loadFromStorage()\n\n      // Inicializar servicio FCM\n      const success = await notificationService.initialize()\n      \n      if (success) {\n        // Configurar listener para notificaciones en tiempo real\n        notificationService.setupForegroundListener(addNotification)\n        isInitialized.value = true\n        console.log('✅ Notification store initialized')\n      }\n\n    } catch (error) {\n      console.error('❌ Error initializing notification store:', error)\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  function addNotification(notification) {\n    // Agregar al inicio de la lista\n    notifications.value.unshift(notification)\n    \n    // Mantener solo las últimas 100 notificaciones\n    if (notifications.value.length > 100) {\n      notifications.value = notifications.value.slice(0, 100)\n    }\n\n    // Guardar en localStorage\n    saveToStorage()\n    \n    console.log('📬 New notification added:', notification)\n  }\n\n  function markAsRead(notificationId) {\n    const notification = notifications.value.find(n => n.id === notificationId)\n    if (notification && !notification.read) {\n      notification.read = true\n      saveToStorage()\n      console.log('✅ Notification marked as read:', notificationId)\n    }\n  }\n\n  function markAllAsRead() {\n    notifications.value.forEach(notification => {\n      notification.read = true\n    })\n    saveToStorage()\n    console.log('✅ All notifications marked as read')\n  }\n\n  function removeNotification(notificationId) {\n    const index = notifications.value.findIndex(n => n.id === notificationId)\n    if (index > -1) {\n      notifications.value.splice(index, 1)\n      saveToStorage()\n      console.log('🗑️ Notification removed:', notificationId)\n    }\n  }\n\n  function clearAll() {\n    notifications.value = []\n    saveToStorage()\n    console.log('🗑️ All notifications cleared')\n  }\n\n  // Storage helpers\n  function loadFromStorage() {\n    try {\n      const stored = localStorage.getItem('fcm_notifications')\n      if (stored) {\n        const parsedNotifications = JSON.parse(stored)\n        notifications.value = parsedNotifications\n        console.log(`📂 Loaded ${parsedNotifications.length} notifications from storage`)\n      }\n    } catch (error) {\n      console.error('❌ Error loading notifications from storage:', error)\n      notifications.value = []\n    }\n  }\n\n  function saveToStorage() {\n    try {\n      localStorage.setItem('fcm_notifications', JSON.stringify(notifications.value))\n    } catch (error) {\n      console.error('❌ Error saving notifications to storage:', error)\n    }\n  }\n\n  // Return public API\n  return {\n    // State\n    notifications,\n    isInitialized,\n    isLoading,\n    \n    // Getters\n    unreadCount,\n    unreadNotifications,\n    readNotifications,\n    \n    // Actions\n    initialize,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll\n  }\n})"
  },

  "step_5_composable": {
    "file": "src/composables/useNotifications.js",
    "code": "import { storeToRefs } from 'pinia'\nimport { useNotificationStore } from '@/stores/notificationStore.js'\nimport { onMounted } from 'vue'\n\nexport function useNotifications() {\n  const notificationStore = useNotificationStore()\n  \n  // Convertir state reactive del store\n  const {\n    notifications,\n    isInitialized,\n    isLoading,\n    unreadCount,\n    unreadNotifications,\n    readNotifications\n  } = storeToRefs(notificationStore)\n\n  // Auto-inicializar cuando se usa el composable\n  onMounted(() => {\n    if (!isInitialized.value) {\n      notificationStore.initialize()\n    }\n  })\n\n  return {\n    // State\n    notifications,\n    isInitialized,\n    isLoading,\n    unreadCount,\n    unreadNotifications,\n    readNotifications,\n    \n    // Actions\n    markAsRead: notificationStore.markAsRead,\n    markAllAsRead: notificationStore.markAllAsRead,\n    removeNotification: notificationStore.removeNotification,\n    clearAll: notificationStore.clearAll\n  }\n}"
  },

  "step_6_notification_item": {
    "file": "src/components/NotificationItem.vue",
    "code": "<template>\n  <div \n    :class=\"['notification-item', { 'unread': !notification.read }]\"\n    @click=\"handleClick\"\n  >\n    <div class=\"notification-content\">\n      <div class=\"notification-header\">\n        <h4 class=\"notification-title\">{{ notification.title }}</h4>\n        <button \n          v-if=\"showRemove\"\n          @click.stop=\"$emit('remove', notification.id)\"\n          class=\"remove-btn\"\n          title=\"Eliminar notificación\"\n        >\n          ×\n        </button>\n      </div>\n      \n      <p class=\"notification-body\">{{ notification.body }}</p>\n      \n      <div class=\"notification-footer\">\n        <span class=\"notification-time\">{{ formattedTime }}</span>\n        <span v-if=\"notification.type\" class=\"notification-type\">{{ notification.type }}</span>\n      </div>\n    </div>\n    \n    <div v-if=\"!notification.read\" class=\"unread-indicator\"></div>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue'\n\n// Props\nconst props = defineProps({\n  notification: {\n    type: Object,\n    required: true\n  },\n  showRemove: {\n    type: Boolean,\n    default: true\n  }\n})\n\n// Emits\nconst emit = defineEmits(['click', 'remove'])\n\n// Computed\nconst formattedTime = computed(() => {\n  const date = new Date(props.notification.timestamp)\n  const now = new Date()\n  const diffInHours = (now - date) / (1000 * 60 * 60)\n  \n  if (diffInHours < 1) {\n    const minutes = Math.floor((now - date) / (1000 * 60))\n    return `${minutes}m`\n  } else if (diffInHours < 24) {\n    return `${Math.floor(diffInHours)}h`\n  } else {\n    return date.toLocaleDateString()\n  }\n})\n\n// Methods\nfunction handleClick() {\n  emit('click', props.notification.id)\n}\n</script>\n\n<style scoped>\n.notification-item {\n  padding: 12px 16px;\n  border-bottom: 1px solid #f0f0f0;\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  transition: background-color 0.2s;\n}\n\n.notification-item:hover {\n  background-color: #f8f9fa;\n}\n\n.notification-item.unread {\n  background-color: #f0f8ff;\n}\n\n.notification-item:last-child {\n  border-bottom: none;\n}\n\n.notification-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.notification-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 4px;\n}\n\n.notification-title {\n  font-weight: 600;\n  font-size: 14px;\n  margin: 0;\n  color: #333;\n  line-height: 1.4;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  font-size: 16px;\n  color: #999;\n  cursor: pointer;\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: all 0.2s;\n}\n\n.remove-btn:hover {\n  background-color: #f0f0f0;\n  color: #666;\n}\n\n.notification-body {\n  color: #666;\n  font-size: 13px;\n  margin: 0 0 8px 0;\n  line-height: 1.4;\n  word-break: break-word;\n}\n\n.notification-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.notification-time {\n  color: #999;\n  font-size: 11px;\n}\n\n.notification-type {\n  color: #007bff;\n  font-size: 10px;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  font-weight: 500;\n}\n\n.unread-indicator {\n  width: 8px;\n  height: 8px;\n  background-color: #007bff;\n  border-radius: 50%;\n  margin-left: 12px;\n  flex-shrink: 0;\n  margin-top: 8px;\n}\n</style>"
  },

  "step_7_notification_bell": {
    "file": "src/components/NotificationBell.vue", 
    "code": "<template>\n  <div class=\"notification-bell\" ref=\"bellRef\">\n    <!-- Bell Button -->\n    <button \n      @click=\"toggleDropdown\"\n      class=\"bell-button\"\n      :class=\"{ 'has-notifications': unreadCount > 0 }\"\n    >\n      <span class=\"bell-icon\">🔔</span>\n      <span v-if=\"unreadCount > 0\" class=\"badge\">{{ displayCount }}</span>\n    </button>\n\n    <!-- Dropdown -->\n    <Transition name=\"dropdown\">\n      <div v-if=\"isOpen\" class=\"notification-dropdown\">\n        <!-- Header -->\n        <div class=\"dropdown-header\">\n          <h3>Notificaciones</h3>\n          <div class=\"header-actions\">\n            <span class=\"count-text\">{{ unreadCount }} nuevas</span>\n            <button \n              v-if=\"notifications.length > 0\"\n              @click=\"handleMarkAllRead\"\n              class=\"action-btn\"\n            >\n              Marcar todas\n            </button>\n            <button \n              v-if=\"notifications.length > 0\"\n              @click=\"handleClearAll\"\n              class=\"action-btn danger\"\n            >\n              Limpiar\n            </button>\n          </div>\n        </div>\n\n        <!-- Loading -->\n        <div v-if=\"isLoading\" class=\"loading-state\">\n          <div class=\"loading-spinner\"></div>\n          <span>Cargando notificaciones...</span>\n        </div>\n\n        <!-- Notification List -->\n        <div v-else-if=\"notifications.length > 0\" class=\"notification-list\">\n          <NotificationItem\n            v-for=\"notification in displayedNotifications\"\n            :key=\"notification.id\"\n            :notification=\"notification\"\n            @click=\"handleNotificationClick\"\n            @remove=\"handleRemoveNotification\"\n          />\n          \n          <!-- Load More -->\n          <div v-if=\"notifications.length > displayLimit\" class=\"load-more\">\n            <button @click=\"loadMore\" class=\"load-more-btn\">\n              Ver más ({{ notifications.length - displayLimit }} restantes)\n            </button>\n          </div>\n        </div>\n\n        <!-- Empty State -->\n        <div v-else class=\"empty-state\">\n          <div class=\"empty-icon\">📭</div>\n          <p>No hay notificaciones</p>\n        </div>\n      </div>\n    </Transition>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport { useNotifications } from '@/composables/useNotifications.js'\nimport NotificationItem from './NotificationItem.vue'\n\n// Composable\nconst {\n  notifications,\n  isLoading,\n  unreadCount,\n  markAsRead,\n  markAllAsRead,\n  removeNotification,\n  clearAll\n} = useNotifications()\n\n// Local state\nconst isOpen = ref(false)\nconst displayLimit = ref(10)\nconst bellRef = ref(null)\n\n// Computed\nconst displayCount = computed(() => {\n  return unreadCount.value > 99 ? '99+' : unreadCount.value\n})\n\nconst displayedNotifications = computed(() => {\n  return notifications.value.slice(0, displayLimit.value)\n})\n\n// Methods\nfunction toggleDropdown() {\n  isOpen.value = !isOpen.value\n}\n\nfunction closeDropdown() {\n  isOpen.value = false\n}\n\nfunction handleNotificationClick(notificationId) {\n  markAsRead(notificationId)\n  // Aquí puedes agregar lógica adicional como navegar a una página específica\n  console.log('Notification clicked:', notificationId)\n}\n\nfunction handleRemoveNotification(notificationId) {\n  removeNotification(notificationId)\n}\n\nfunction handleMarkAllRead() {\n  markAllAsRead()\n}\n\nfunction handleClearAll() {\n  if (confirm('¿Estás seguro de que quieres eliminar todas las notificaciones?')) {\n    clearAll()\n    closeDropdown()\n  }\n}\n\nfunction loadMore() {\n  displayLimit.value += 10\n}\n\n// Click outside to close\nfunction handleClickOutside(event) {\n  if (bellRef.value && !bellRef.value.contains(event.target)) {\n    closeDropdown()\n  }\n}\n\n// Lifecycle\nonMounted(() => {\n  document.addEventListener('click', handleClickOutside)\n})\n\nonUnmounted(() => {\n  document.removeEventListener('click', handleClickOutside)\n})\n</script>\n\n<style scoped>\n.notification-bell {\n  position: relative;\n  display: inline-block;\n}\n\n.bell-button {\n  background: none;\n  border: none;\n  font-size: 24px;\n  cursor: pointer;\n  position: relative;\n  padding: 8px;\n  border-radius: 50%;\n  transition: background-color 0.2s;\n}\n\n.bell-button:hover {\n  background-color: #f0f0f0;\n}\n\n.bell-button.has-notifications .bell-icon {\n  animation: shake 0.5s ease-in-out;\n}\n\n@keyframes shake {\n  0%, 100% { transform: rotate(0deg); }\n  25% { transform: rotate(-10deg); }\n  75% { transform: rotate(10deg); }\n}\n\n.badge {\n  position: absolute;\n  top: 2px;\n  right: 2px;\n  background: #ff4444;\n  color: white;\n  border-radius: 50%;\n  padding: 2px 6px;\n  font-size: 11px;\n  min-width: 18px;\n  text-align: center;\n  font-weight: 600;\n  line-height: 1.2;\n}\n\n.notification-dropdown {\n  position: absolute;\n  top: calc(100% + 8px);\n  right: 0;\n  width: 380px;\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\n  z-index: 1000;\n  max-height: 500px;\n  overflow: hidden;\n}\n\n.dropdown-header {\n  padding: 16px 20px;\n  border-bottom: 1px solid #f0f0f0;\n  background: #fafafa;\n}\n\n.dropdown-header h3 {\n  margin: 0 0 8px 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: #333;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.count-text {\n  font-size: 12px;\n  color: #666;\n  flex: 1;\n}\n\n.action-btn {\n  background: none;\n  border: none;\n  color: #007bff;\n  cursor: pointer;\n  font-size: 12px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n.action-btn:hover {\n  background-color: #f0f8ff;\n}\n\n.action-btn.danger {\n  color: #dc3545;\n}\n\n.action-btn.danger:hover {\n  background-color: #fff5f5;\n}\n\n.notification-list {\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.loading-state {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 20px;\n  gap: 12px;\n  color: #666;\n}\n\n.loading-spinner {\n  width: 20px;\n  height: 20px;\n  border: 2px solid #f0f0f0;\n  border-top: 2px solid #007bff;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.empty-state {\n  text-align: center;\n  padding: 40px 20px;\n  color: #666;\n}\n\n.empty-icon {\n  font-size: 48px;\n  margin-bottom: 12px;\n}\n\n.empty-state p {\n  margin: 0;\n  font-size: 14px;\n}\n\n.load-more {\n  padding: 12px 16px;\n  border-top: 1px solid #f0f0f0;\n  text-align: center;\n}\n\n.load-more-btn {\n  background: none;\n  border: 1px solid #ddd;\n  color: #666;\n  cursor: pointer;\n  font-size: 12px;\n  padding: 8px 16px;\n  border-radius: 6px;\n  transition: all 0.2s;\n}\n\n.load-more-btn:hover {\n  background-color: #f8f9fa;\n  border-color: #ccc;\n}\n\n/* Transition animations */\n.dropdown-enter-active,\n.dropdown-leave-active {\n  transition: all 0.2s ease;\n}\n\n.dropdown-enter-from {\n  opacity: 0;\n  transform: translateY(-8px) scale(0.95);\n}\n\n.dropdown-leave-to {\n  opacity: 0;\n  transform: translateY(-8px) scale(0.95);\n}\n</style>"
  },

  "step_8_app_integration": {
    "file": "src/App.vue",
    "description": "Ejemplo de cómo usar el componente en tu app principal",
    "code": "<template>\n  <div id=\"app\">\n    <header class=\"app-header\">\n      <h1>Mi App Mozo</h1>\n      <div class=\"header-actions\">\n        <!-- Otros botones -->\n        <NotificationBell />\n      </div>\n    </header>\n    \n    <main>\n      <!-- Tu contenido principal -->\n      <router-view />\n    </main>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted } from 'vue'\nimport { useNotificationStore } from '@/stores/notificationStore.js'\nimport NotificationBell from '@/components/NotificationBell.vue'\n\n// Inicializar notificaciones cuando la app carga\nconst notificationStore = useNotificationStore()\n\nonMounted(() => {\n  // Auto-inicializar el sistema de notificaciones\n  notificationStore.initialize()\n})\n</script>\n\n<style>\n.app-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 24px;\n  background: #fff;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n</style>"
  },

  "step_9_installation": {
    "description": "Paquetes NPM necesarios",
    "packages": [
      "firebase",
      "pinia",
      "@pinia/nuxt (si usas Nuxt)",
      "vue@^3.0.0"
    ],
    "install_command": "npm install firebase pinia"
  },

  "step_10_configuration_notes": {
    "important_steps": [
      "1. Obtener configuración Firebase de Firebase Console",
      "2. Generar VAPID key en Firebase Console > Project Settings > Cloud Messaging",
      "3. Configurar el service worker en la carpeta public/",
      "4. Asegurarse de que el servidor sirve archivos con HTTPS",
      "5. Registrar el store Pinia en main.js",
      "6. Importar y usar el componente NotificationBell donde lo necesites"
    ],
    "main_js_setup": "import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\nconst app = createApp(App)\nconst pinia = createPinia()\n\napp.use(pinia)\napp.mount('#app')"
  },

  "testing_flow": {
    "description": "Flujo para probar las notificaciones",
    "steps": [
      "1. Abrir la app en el navegador",
      "2. Permitir notificaciones cuando lo pida el navegador", 
      "3. Verificar en consola que se registró el token FCM",
      "4. Desde Postman, enviar notificación usando tu backend: POST https://mozoqr.com/api/admin/notifications/send-to-all",
      "5. Deberías ver: Toast notification en la app + número en el bell icon + notificación en el dropdown",
      "6. Si la app está cerrada/minimizada, deberías ver notificación nativa del sistema"
    ]
  },

  "api_endpoints_reminder": {
    "description": "Endpoints de tu backend que ya funcionan",
    "endpoints": [
      "POST /api/device-token - Registrar token FCM",
      "GET /api/user/notifications - Obtener historial (opcional)",
      "POST /api/admin/notifications/send-to-all - Enviar a todos",
      "POST /api/admin/notifications/send-to-user - Enviar a usuario específico"
    ]
  }
}